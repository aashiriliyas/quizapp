trigger:
- main

pool:
  vmImage: 'macos-latest'  # Use 'windows-latest' or 'ubuntu-latest' based on your build requirements

variables:
  buildConfiguration: 'Release'
  iosSdk: 'iphonesimulator'
  androidSdk: 'android-30'

jobs:
- job: Build
  displayName: 'Build iOS and Android'
  pool:
    vmImage: 'macos-latest'  # Use 'windows-latest' or 'ubuntu-latest' based on your build requirements

  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install Node.js'

  - script: |
      npm install -g yarn
      yarn install
    displayName: 'Install dependencies'

  - script: |
      cd ios
      pod install
    displayName: 'Install CocoaPods dependencies'
    condition: eq(variables['Agent.OS'], 'Darwin')

  - script: |
      yarn build:ios
    displayName: 'Build iOS'
    condition: eq(variables['Agent.OS'], 'Darwin')

  - script: |
      yarn build:android
    displayName: 'Build Android'

- job: Deploy
  displayName: 'Deploy to App Stores'
  dependsOn: Build
  pool:
    vmImage: 'macos-latest'  # Use 'windows-latest' or 'ubuntu-latest' based on your deployment requirements

  steps:
  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: 'your-cert.p12'
      certPwd: '$(APPLE_CERTIFICATE_PASSWORD)'
      keychain: 'temp'
      keychainPassword: '$(APPLE_KEYCHAIN_PASSWORD)'
    displayName: 'Install Apple Certificate'
    condition: eq(variables['Agent.OS'], 'Darwin')

  - task: InstallAppleProvisioningProfile@1
    inputs:
      provisioningProfileLocation: 'secureFiles'
      provProfileSecureFile: 'your-profile.mobileprovision'
    displayName: 'Install Apple Provisioning Profile'
    condition: eq(variables['Agent.OS'], 'Darwin')

  - script: |
      yarn deploy:ios
    displayName: 'Deploy iOS'
    condition: eq(variables['Agent.OS'], 'Darwin')

  - script: |
      yarn deploy:android
    displayName: 'Deploy Android'